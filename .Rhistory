pull(national_state_difference)
national_state_diff
num_state_diff <- filter(all_totals, state_total != cases)
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
num_state_diff <- filter(all_totals, state_total != cases)
View(num_state_diff)
num_state_diff
nrow(num_state_diff)
num_state_diff <- nrow(num_state_diff)
nuum_state_diff
num_state_diff
num_state_diff <- filter(all_totals, state_total != cases)
num_state_diff <- nrow(num_state_diff)
num_state_diff
num_county_diff <- filter(all_totals, county_total != cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
num_county_diff <- filter(all_totals, county_total != new_cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
num_county_diff <- filter(all_totals, county_total != new_cases)
View(num_county_diff)
View(totals_by_day)
View(county_by_day)
View(counties)
View(states)
View(counties)
tail(counties, n =1)
num_county_diff <- filter(all_totals, county_total != new_cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
num_county_diff <- filter(all_totals, county_total != cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
# national_total_cases: The case counts in the `national` data frame
# state_total_cases:    The sum of all case counts in the `states` data frame
# county_total_cases:   The sum of all case counts in the `counties` data frame
#
# We now guide you through the steps for this consistency check. We've typed the
# variable names to save you a little bit of work.
#
# 4.a Create a `county_by_day` data frame with columns:
#     `date` and `county_total_cases`. HINT: To summarize
#      the case counts, how do you need to group the data?
county_by_day <- counties %>%
group_by(date) %>%
summarize(county_total_cases = sum(cases))
View(county_by_day)
# 4.b Create a `state_by_day` data frame with columns:
#     `date` and `state_total_cases`.  HINT: See previous
#      hint.
state_by_day <- states %>% group_by(date) %>% summarize(state_total_cases = sum(cases))
# 4.c Join the `county_by_day` and `state_by_day` data frames. Call
#     this data frame `totals_by_day`.
totals_by_day <- left_join(county_by_day, state_by_day)
# 4.d Join `totals_by_day` with the `nation` data frame and, for
#     clarity, rename the `cases` column to `national_total_cases`. Call
#     this data frame `all_totals`.
national <- rename(national, national_total_cases = cases)
all_totals <- left_join(totals_by_day, national)
# 4.e How many differences do you find between `national_total_cases` and
#     `state_total_cases`?
#     `national_state_diff`  (as a numeric value - use pull() function )
national_state_diff <- all_totals %>% filter(national_total_cases != state_total_cases) %>% summarize(national_state_difference = n())%>%
pull(national_state_difference)
national_state_diff
# 4.f How many differences do you find between `state_total_cases` and
#     `county_total_cases'?
#     `state_county_diff` (as a numeric value - use the pull() function)
state_county_diff <- all_totals %>% filter(state_total_cases != county_total_cases) %>% summarize(county_state_difference = n()) %>% pull(county_state_difference)
state_county_diff
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
# Oh no! An inconsistency -- let's dig further into this. Let's see if we can
# find out *where* this inconsistency lies. Let's take the county level data,
# and add up all of the cases to the state level on each day (e.g.,
# aggregating to the state level). Store this dataframe with three columns
# (state, date, county_totals) in the variable `sum_county_to_state`.
# (To avoid DPLYR automatically grouping your results,
# specify `.groups = "drop"` in your `summarize()` statement. This is a bit of
# an odd behavior....)
sum_county_to_state <- counties %>%
filter(date) %>%
filter(state) %>%
fitler(county_totals)
# Oh no! An inconsistency -- let's dig further into this. Let's see if we can
# find out *where* this inconsistency lies. Let's take the county level data,
# and add up all of the cases to the state level on each day (e.g.,
# aggregating to the state level). Store this dataframe with three columns
# (state, date, county_totals) in the variable `sum_county_to_state`.
# (To avoid DPLYR automatically grouping your results,
# specify `.groups = "drop"` in your `summarize()` statement. This is a bit of
# an odd behavior....)
sum_county_to_state <- counties %>%
filter(date) %>%
filter(state) %>%
filter(county_totals)
View(all_totals)
View(sum_country_to_state)
View(state_by_day)
sum_county_to_state <- merge(x = county_by_day, y = state_by_day, by = 'date')
View(sum_county_to_state)
joined_states <- join(x = sum_county_to_state, y = states, by = 'date')
joined_states <- merge(x = sum_county_to_state, y = states, by = 'date', all.x = TRUE)
joined_states
View(joined_states)
joined_states <- merge(x = sum_county_to_state, y = states, by = 'date')
View(joined_states)
View(states)
View(county_by_day)
View(counties)
county_by_day <- group_by(counties, date)
View(county_by_day)
county_by_day <- summarise(county_by_day, county_total = sum(cases))
county_by_day1 <- group_by(counties, date)
View(county_by_day1)
View(sum_county_to_state)
View(sum_county_to_state, county_total != state_total)
View(filter(sum_county_to_state, county_total != state_total))
y
sum_county_to_state <- merge(x = county_by_day, y = state_by_day, by = 'date')
has_discrepancy <- filter(sum_county_to_state, county_total != state_total)
has_discrepancy
county_by_day <- group_by(counties, date)
colnames(county_by_day)
county_by_day <- summarise(county_by_day, county_total = location)
county_by_day <- summarise(county_by_day, county_total = location, .groups = "drop")
county_by_day <- summarise(county_by_day, location, .groups = "drop")
county_by_day1 <- group_by(counties, location)
View(county_by_day1)
county_by_day1 <- group_by(counties, county)
View(county_by_day1)
county_by_day1 <- group_by(counties, state)
View(county_by_day1)
county_by_day1 <- summarise(county_by_day, state, .groups = "drop")
cases_in_county <- max(counites$cases)
cases_in_county <- max(counties$cases)
state_in_county <- max(state$cases)
state_in_county <- max(states$cases)
national_in_county <- max(national$cases)
national_in_county
View(counties)
cases_in_county <- max(counties$cases)
cases_in_county
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
state_in_county <- max(states$cases)
state_in_county
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
sum_county_to_state <- group_by(counties, state)
View(sum_county_to_state)
sum_county_to_state <- group_by(counties, state, date)
View(sum_county_to_state)
sum_county_to_state <- counties %>%
group_by(state, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
View(sum_county_to_state)
sum_county_to_state <- counties %>%
group_by(date, states)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
sum_county_to_state <- counties %>%
group_by(states, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
sum_county_to_state <- counties %>%
group_by(state, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
View(sum_county_to_state)
has_discrepancy <- filter(sum_county_to_state, county_total != state_total)
joined_states <- merge(x = sum_county_to_state, y = states, by = 'date')
View(joined_states)
joined_states <- left_join(states, sum_county_to_state, by = c("date", "state"), all.x = TRUE)
View(joined_states)
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
joined_states <- left_join(states, sum_county_to_state, by = c("date", "state"), all.x = TRUE)
View(joined_states)
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
has_discrepancy <- filter(joined_states, county_total != cases)
has_discrepancy <- filter(joined_states, county_total != cases)
sum_county_to_state <- counties %>%
group_by(state, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
has_discrepancy <- filter(joined_states, county_total != cases)
has_discrepancy <- filter(joined_states, county_totals != cases)
View(has_discrepancy)
state_highest_difference <- group_by(has_discrepancy, state)
state_highest_difference <- summarise(state_highest_difference, difference = abs(sum(county_totals - cases)))
state_highest_difference <- filter(difference == max(difference))
state_highest_difference <- filter(difference == max(difference))
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
has_discrepancy <- filter(joined_states, county_totals != cases)
state_highest_difference <- group_by(has_discrepancy, state)
state_highest_difference <- summarise(state_highest_difference, difference = abs(sum(county_totals - cases)))
state_highest_difference <- filter(difference == max(difference))
View(state_highest_difference)
state_highest_difference <- filter(state_highest_difference, difference == max(difference))
state_highest_difference <- state_highest_difference[,1]
state_highest_difference
national$new_deaths <- national$deaths - lag(national$deaths, 1)
View(national)
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
source("~/.active-rstudio-document")
runApp('Desktop/Class/Info 201/SHINY II 5:16')
runApp('Desktop/Class/Info 201/SHINY II 5:16')
runApp('Desktop/Class/Info 201/Lect 14 -- Shiny App Activity')
runApp()
runApp()
runApp('Desktop/Class/Info 201/Lect 14 -- Shiny App Activity')
runApp('Desktop/Class/Info 201/Lect 14 -- Shiny App Activity')
runApp('Desktop/Class/Info 201/SHINY II 5:16')
runApp('Desktop/Class/Info 201/SHINY II 5:16')
shiny::runApp('Desktop/Class/Info 201/Lect 10 - Data Wranging and Viz Practice')
runApp('Desktop/Class/Info 201/Lect 10 - Data Wranging and Viz Practice')
runApp('Desktop/Class/Info 201/Lect 10 - Data Wranging and Viz Practice')
runApp('Desktop/Class/Info 201/Lect 10 - Data Wranging and Viz Practice')
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
pp <- c("sadsa", "gas")
pp
pp(1)
pp[1]
pp[2]
pp(which(pp == "gas"))
aa(which(pp == "gas"))
names(which(pp == "gas"))
pp
names(which(pp == "sadsa"))
names(which(pp == sadsa))
names(which(pp == "sadsa"))
pp
names(which(pp == "gas"))
names(pp)[pp == "sadsa"]
v <- c("MA", "NY", "PA")
names(v) <- c("Massachusetts", "New York", "Pennsylvania")
names(which(v == "NY"))
cho = c("gas", "coal", "oil", "methane")
cho
match("gas", cho)
data_df$oil_co2
mm <- c("gas_co2", "coal_co2", "oil_co2")
mm
match("gas", cho)
mm(match("gas", cho))
mm[mm(match("gas", cho))]
mm[(match("gas", cho))]
mm[(match("gas", cho))]
filter1_df <- filter(data_df, year <= 2018)
View(filter1_df)
filter1_df <- select(filter1_df, mm[(match("coal", cho))])
View(filter1_df)
View(filter1_df)
filter1_df <- filter(data_df, year <= 2018)
View(filter1_df)
filter1_df <- filter1_df %>%
group_by("year") %>%
summarise(sum = sum(gas_co2)
View(filter1_df)
filter1_df <- filter1_df %>%
+     group_by("year") %>%
+     summarise(sum = sum(gas_co2))
filter1_df <- filter1_df %>%
+     group_by("year") %>%
+     summarise(sum = sum(gas_co2)
filter1_df <- filter1_df %>%
+     group_by("year") %>%
+     summarise(sum = sum(gas_co2, na.rm =TRUE))
filter1_df <- filter1_df %>%
+     +     group_by("year") %>%
+     +     summarise(sum = sum(gas_co2, na.rm =TRUE))
filter1_df <- filter1_df %>%
+     +     group_by(year) %>%
+     +     summarise(sum = sum(gas_co2, na.rm =TRUE))
> filter1_df <- filter1_df %>%
+     +     +     group_by(year) %>%
+     +     +     summarise(sum = sum(gas_co2, na.rm =TRUE))
> filter1_df <-  filter1_df %>%
+     +     +     group_by(year) %>%
+     +     +     summarise(sum = sum(gas_co2, na.rm =TRUE))
filter1_df
> filter1_df <-  filter1_df %>%
+     +     +     group_by(year) %>%
+     +     +     summarise(sum = sum(gas_co2, na.rm =TRUE))
filter1_df$year
> filter1_df <-  filter1_df %>%
+     +     +     group_by(filter1_df$year) %>%
+     +     +     summarise(sum = sum(gas_co2, na.rm =TRUE))
group_by(filter1_df$year)
typeof(filter1_df$year)
typeof(filter1_df$country)
> filter1_df <-  filter1_df %>%
+     +     +     group_by(filter1_df$year) %>%
+     +     +     summarise(sum = sum(gas_co2, na.rm =TRUE))
filter1_df <-  filter1_df %>%
group_by(year) %>%
summarise(sum = sum(gas_co2, na.rm =TRUE))
View(filter1_df)
filter1_df <- filter(data_df, year <= input$poverty)
filter1_df <- filter(data_df, year <= 2018)
filter2_df <-  filter1_df %>%
group_by(year) %>%
summarise(sum = sum(coal_co2, na.rm =TRUE))
View(filter2_df)
View(filter1_df)
filter1_df <-  filter1_df %>%
group_by(year) %>%
summarise(sum = sum(gas_co2, na.rm =TRUE))
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
View(filter1_df)
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
filter1_df <- filter(data_df, year <= 2018)
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
filter1_df <- select(filter1_df, mm[(match("coal", cho))])
mm[(match("coal", cho))]
mm[(match("coal", cho))]
mm[(match("coal", cho))]
mm[(match("coal", cho))]
mm[(match("coal", cho))]
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
View(filter1_df)
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
filter1_df["year"] = data_df$year
filter1_df["year"] = data_df$year
filter1_df["year"] = data_df$year
filter1_df <- filter(data_df, year <= input$poverty)
filter1_df <- filter(data_df, year <= 2018)
filter1_df <-  filter1_df %>%
group_by(year) %>%
summarise(sum = sum(data_df$mm[(match("coal_co2", cho))], na.rm =TRUE))
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
runApp('app_ui.R')
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
filter1_df <- filter(data_df, year <= 2018)
mm
filter2_df <-  filter1_df %>%
group_by(year) %>%
summarise(sum = sum(data_df$gas_co2, na.rm =TRUE))
View(filter2)df
View(filter2_df)
filter1_df <-  filter1_df %>%
group_by(year) %>%
summarise(sum = sum(data_df$gas_co2, na.rm =TRUE))
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
filter1_df <- filter(data_df, year <= 1751)
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
aggregate(Rain_cm ~ DOY, DF, sum)
filter1_df <- filter(data_df, year <= 2018)
aggregate(gas_co2 ~ year, filter1_df, sum)
aggregate(gas_co2 ~ year, filter1_df, sum, na.rm = TRUE)
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
filter1_df$mm[(match(gas, cho))]
filter1_df$mm[(match("gas", cho))]
data_df$mm[(match("gas", cho))]
mm[(match("input$ages"gas, cho))
mm[(match("gas", cho))
mm[(match("gas", cho))]
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
filter1_df <- aggregate("gas_co2" ~ year, filter1_df, sum, na.rm = TRUE)
aggregate(gas_co2 ~ year, filter1_df, sum, na.rm = TRUE)
filter1_df <- aggregate("gas_co2" ~ year, filter1_df, sum, na.rm = TRUE)asas
aggregate("gas_co2" ~ year, filter1_df, sum, na.rm = TRUE)
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R')
plot_ly(data = filter1_df, x= ~year, y = ~oil_co2, type = "scatter", mode = 'lines') %>% layout(title = paste0("Use of ", input$material, " over the years"))
source("~/Desktop/Class/Info 201/a4-data-applications-supamike2323/app_ui.R")
runApp('Desktop/Class/Info 201/a4-data-applications-supamike2323')
knitr::opts_chunk$set(echo = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(data.table))
source("Summary_Information.R")
source("Table.R")
source("agevspts.R")
source("positions.r")
source("warriors.r")
shiny::runApp('Desktop/Class/Info 201/final-project-info201')
source("~/Desktop/Class/Info 201/final-project-info201/app_ui.R")
runApp('Desktop/Class/Info 201/final-project-info201')
radarchart(make_radar_df("asdas"), axistype = 1,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="orange", cglty=1, axislabcol = "blue", cglwd=0.8, vlcex=0.8)
radarchart()
source("~/Desktop/Class/Info 201/final-project-info201/app_server.R")
runApp('Desktop/Class/Info 201/final-project-info201')
player_df <- data_df %>%
select(Player, Tm, TRB, AST, STL, BLK, TOV, PTS)
View(player_df)
sort(player_df$Player)
player_df <- data_df %>% arrange(Player) %>%
select(Player, Tm, TRB, AST, STL, BLK, TOV, PTS)
runApp('Desktop/Class/Info 201/final-project-info201')
stats_df$Tm
source("~/Desktop/Class/Info 201/final-project-info201/app_ui.R")
runApp('Desktop/Class/Info 201/final-project-info201')
source("~/Desktop/Class/Info 201/final-project-info201/data_frames.R")
runApp('Desktop/Class/Info 201/final-project-info201')
source("~/Desktop/Class/Info 201/final-project-info201/app_ui.R")
runApp('Desktop/Class/Info 201/final-project-info201')
paste0("Belonged NBA team ", "saaa")
which(data_df$Player == "Lebron James")
which(player_df$Player == "Al Horford")
data_df[2 , which(player_df$Player == "Al Horford")]
data_df[1 , which(player_df$Player == "Al Horford")]
data_df[which(player_df$Player == "Al Horford"), 2]
data_df[which(player_df$Player == "Al Horford"), 1]
player_df[which(player_df$Player == "Al Horford"), 1]
player_df[which(player_df$Player == "Al Horford"), 2]
source("~/Desktop/Class/Info 201/final-project-info201/app_ui.R")
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
runApp('Desktop/Class/Info 201/final-project-info201')
setwd("~/Desktop/Class/Info 201/final-project-info201")
source("JYhPlZ.png")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(filtered_team)
View(filtered_team)
runApp()
runApp()
runApp()
View(filtered_team)
filtered_team <- avg_age %>%
filter(Team %in% input$team_select)
View(avg_age)
max(avg_age[:, 2])
max(avg_age[, 2])
min(avg_age[, 2])
You can select teams and the chart would automatically generate the according to the mean age on it. You can find more details by hovering the mouse on the bar. The slider can filter out the max-age inputted and any team mean age above would be disregarded.
Analysis
paste0("By observing this chart and using it multiple times, we think that the question: \"Would age affect the performance of an NBA player?\" can be answered. Doing some background computing, the max mean age is ", max(avg_age[, 2]), ", and the min means age is , ", min(avg_age[, 2]), " . By selecting some of the most dominant NBA teams, the Milwaukee Bucks (20 - 21 NBA team Champion), Phoenix Suns (Western Conference champion), Atlanta Hawks (Conference Finals), LA Clippers (Conference Finals), Philadelphia 76ers (Conference Semifinals), Utah Jazz (Conference Semifinals). This is the chart generated, we can see that the mean age range is between 25.709 and 27.8667 (this is found by hovering the mouse on the bars), and the difference is pretty dramatic. Therefore, we can reasonable evidence to believe that age is not a crucial factor in the performance of the team, rather there are other potential factors that would affect performance.")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
make_radar_df("Devin Booker")
source("~/Desktop/Class/Info 201/final-project-info201/app_server.R")
make_radar_df("Devin Booker")
make_radar_df <- function(player_name){
rd_df <- select(player_df, -c(Player, Tm))
min_df <- summarise_all(rd_df, min)
max_df <- summarise_all(rd_df, max)
data_pt <- filter(player_df, Player == player_name)
data_pt <- select(data_pt, -c (Player, Tm))
do.call("rbind", list(max_df, min_df, data_pt))
make_radar_df <- function(player_name){
rd_df <- select(player_df, -c(Player, Tm))
min_df <- summarise_all(rd_df, min)
max_df <- summarise_all(rd_df, max)
data_pt <- filter(player_df, Player == player_name)
data_pt <- select(data_pt, -c (Player, Tm))
do.call("rbind", list(max_df, min_df, data_pt))
}
make_radar_df("Devin Booker")
make_radar_df("LeBron James")
do.call("rbind", list(max_df, min_df, data_pt))
make_radar_df("Devin Booker")
datapt_df = make_radar_df("Devin Booker")
datapt_df
datapt_df[3,]
make_radar_df(LeBron James)[3,]
make_radar_df("LeBron James")[3,]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#second page
page2_main <- mainPanel(
h2("Chart of average ages in every NBA team in the NBA season of 2020 - 2021"),
plotlyOutput(outputId = "bar"),
h2("Insights"),
p(paste0("By observing this chart and using it multiple times, we think that the question:
\"Would age affect the performance of an NBA player?\" can be answered. Doing some
background computing, the max mean age is ", max(avg_age[, 2]), ", and the min means
age is ", min(avg_age[, 2]), " . By selecting some of the most dominant NBA teams, th
e Milwaukee Bucks (20 - 21 NBA team Champion), Phoenix Suns (Western Conference champion),
Atlanta Hawks (Conference Finals), LA Clippers (Conference Finals), Philadelphia 76ers
(Conference Semifinals), Utah Jazz (Conference Semifinals). This is the chart generated below:")),
img(src = "Chart1.png", height = 500, width = 900),
p("We can see that the mean age range is between 25.709 and 27.8667 (this is found by hovering the mouse on the bars), and the difference is pretty dramatic. Therefore, we can reasonable evidence to believe that age is not a crucial factor in the performance of the team, rather there are other potential factors that would affect performance.")
runApp()
runApp()
runApp()
runApp()
runApp()
